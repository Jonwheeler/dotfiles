[user]
  name = Jon Wheeler
  email = jon@elsif.co

[github]
  user = jonwheeler

[apply]
  whitespace = nowarn

[core]
  editor = vim

[alias]
  co = checkout
  ct = checkout -t
  ci = commit -v
  ca = commit -av
  st = status -sb
  rh = reset --hard
  sl = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  up = pull
  track = !git-track
  prune-all = !git-prune-all
    # locate commit where a particular file was introduced
  added-file        = log --diff-filter=A --
  # list aliases
  aliases           = !git config --get-regexp '^alias.' | awk -F '[. ]' '{ print $2 }'
  # list git bins (lots of gems in there)
  bin               = !find $(git --exec-path) -type f | xargs basename | $(git config --get core.pager)
  # stage and commit given file
  checkin           = ![[ -z "$*" ]] && echo 'No file name was provided.' 1>&2 && exit 1 || git stage "$*" && git commit $!
  # diff current HEAD against master (this is what you want 90% of the time if you work in topic branches)
  compare           = diff HEAD..master --
  # list "conflicted" files (files containing conflict markers)
  conflicted        = grep --name-only --full-name '<<<<<<< HEAD'
  # list contributor stats for this repo
  contributors      = !git shortlog -n -s --no-merges $@ | cat - && echo && echo total $(git rev-list --count HEAD)
  # count modified files
  count-modified    = !echo $(git status --porcelain | grep -E '[^MARC]' | wc -l | awk '{ print $1 }') files modified
  # give someone else credit for a commit
  credit-author     = !echo '\nPending Commit:\n% git commit -am \"commit message\" --author \"Full Name <name@domain.tld>\"\n\nExisting Commit:\n% git commit --amend --author \"Full Name <name@domain.tld>\" -C HEAD\n'
  # consider a topic branch "finished" by deleting it locally and from your "origin" remote
  finish            = ![[ -z "$*" ]] && echo 'No branch was provided.' 1>&2 && exit 1 || git branch -d "$*" && git push origin --delete $!
  # edit your global config
  edit-config       = config --global -e
  # open files with conflict markers in your configured editor
  edit-conflicted   = !$EDITOR $(git grep --name-only --full-name '<<<<<<< HEAD' | awk '{print $NF}')
  # open modified files in your configured editor
  edit-modified     = !$EDITOR $(git status --porcelain | grep -E '[^MARC]' | awk '{print $NF}')
  # group grep search results (much more readable this way)
  grep-group        = grep --break --heading --line-number
  # commit history in graph format: abbreviated commits ID, one commit per line + with commit references (like git log --decorate)
  history           = log --graph --decorate --pretty=oneline --abbrev-commit
  # show ignored project files
  ignored           = !git status --ignored | grep -F 'Ignored files:' -A100
  # navigate to the JIRA story corresponding to the current branch (`git set-jira-domain your domain` to configure 
  jira-branch       = !echo 'To set your Jira Server Url: `git config --replace-all jira.serverurl http://...`' && git web--browse $(git config --get jira.serverurl)/browse/$(git name-rev --name-only HEAD)
  # list commits not yet pushed to remote
  local             = log --branches --not --remotes
  # show commits where my github user name is the author
  log-github-user   = !git log --author="$(git config --get github.user)"
  # markdown-friendly list of topic/branch related logs (great for Github pull requests)
  markdown          = !BN=$(git name-rev --name-only HEAD) && git log --no-merges --grep=$BN --pretty=oneline | awk -F"$BN: " '{print \"-\", $NF}' | uniq
  # show branches that have been merged into current (HEAD) branch
  merged            = !git fetch --all --prune && git branch --all --merged HEAD
  # show branches that have not been merged into current (HEAD) branch
  not-merged        = !git fetch --all --prune && git branch --all --no-merged HEAD
  # terminal tab reflecting your current git project name (https://gist.github.com/3874729)
  project-name      = config --replace-all project.info.name
  # fetch and rebase from upstream/master then push current branch to origin
  sync              = !git pull --no-rebase --ff upstream master && git push -u origin +HEAD
  # same as `git sync` but also rebases
  sync-rebase       = !git pull --rebase --ff upstream master && git push -u origin +HEAD
  # decorated graph view of one liner summarized commits from all branches. (inspired by git-extras)
  tree              = log --all --graph --decorate --oneline --simplify-by-decoration
  # undo local changes
  undo              = checkout --
  # remove staged changes from the index: (1) provide file name/pattern (2) otherwise, removes all
  unstage           = reset HEAD --
  # list untracked files
  untracked         = ls-files -o
  # git log with dates of commit
  lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short

[apply]
  whitespace = nowarn

[branch]
  autosetupmerge = true

[color]
  branch = auto
  diff = auto
  status = auto

[push]
  default = tracking
